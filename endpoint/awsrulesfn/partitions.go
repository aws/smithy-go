// Code generated by endpoint/awsrulesfn/internal/partition. DO NOT EDIT.

package awsrulesfn

import (
	"fmt"
	"regexp"

	"github.com/aws/smithy-go/endpoint/rulesfn"
	"github.com/aws/smithy-go/ptr"
)

// Partition provides the metadata describing an AWS partition.
type Partition struct {
	Name               string
	DnsSuffix          string
	DualStackDnsSuffix string
	SupportsFIPS       bool
	SupportsDualStack  bool
}

// GetPartition returns an AWS [Partition] for the region provided. If the
// partition cannot be determined nil will be returned. If errors occur they
// will be added to the provided [ErrorCollector].
func GetPartition(region string, ec *rulesfn.ErrorCollector) *Partition {
	if v, ok := regionPartition[region]; ok {
		p, ok := partitions[v.PartitionID]
		if vv := v.Metadata.Name; vv != nil {
			p.Name = *vv
		}
		if vv := v.Metadata.DnsSuffix; vv != nil {
			p.DnsSuffix = *vv
		}
		if vv := v.Metadata.DualStackDnsSuffix; vv != nil {
			p.DualStackDnsSuffix = *vv
		}
		if vv := v.Metadata.SupportsFIPS; vv != nil {
			p.SupportsFIPS = *vv
		}
		if vv := v.Metadata.SupportsDualStack; vv != nil {
			p.SupportsDualStack = *vv
		}
		if !ok {
			panic(fmt.Sprintf(
				"bad codegen, unable to get region looked up partition %v from partitions map",
				v.PartitionID))
		}
		return &p
	}

	for _, r := range regionRegexps {
		if r.RegionRegex.MatchString(region) {
			p, ok := partitions[r.PartitionID]
			if !ok {
				panic(fmt.Sprintf(
					"bad codegen, unable to get region regexp looked up partition %v from partitions map",
					r.PartitionID))
			}
			return &p
		}
	}

	ec.AddError(rulesfn.FnError{
		Name: "GetPartition",
		Err: fmt.Errorf(
			"unable to lookup partition from region match, and region regexp, defaulting to %v",
			defaultPartition),
	})

	p, ok := partitions[defaultPartition]
	if !ok {
		panic(fmt.Sprintf(
			"bad codegen, unable to get default partition %v from partitions map",
			defaultPartition))
	}

	return &p
}

const defaultPartition = "aws"

var partitions = map[string]Partition{
	"aws": {
		Name:               "aws",
		DnsSuffix:          "amazonaws.com",
		DualStackDnsSuffix: "api.aws",
		SupportsFIPS:       true,
		SupportsDualStack:  true,
	},
	"aws-cn": {
		Name:               "aws-cn",
		DnsSuffix:          "amazonaws.com.cn",
		DualStackDnsSuffix: "api.amazonwebservices.com.cn",
		SupportsFIPS:       true,
		SupportsDualStack:  true,
	},
}

type partitionMetadata struct {
	Name               *string
	DnsSuffix          *string
	DualStackDnsSuffix *string
	SupportsFIPS       *bool
	SupportsDualStack  *bool
}

var regionPartition = map[string]struct {
	PartitionID string
	Metadata    partitionMetadata
}{
	"aws-global": {
		PartitionID: "aws",
		Metadata: partitionMetadata{
			Name:               nil,
			DnsSuffix:          nil,
			DualStackDnsSuffix: nil,
			SupportsFIPS:       nil,
			SupportsDualStack:  nil,
		},
	},
	"us-east-1": {
		PartitionID: "aws",
		Metadata: partitionMetadata{
			Name:               nil,
			DnsSuffix:          nil,
			DualStackDnsSuffix: nil,
			SupportsFIPS:       nil,
			SupportsDualStack:  nil,
		},
	},
	"us-skip-1": {
		PartitionID: "aws",
		Metadata: partitionMetadata{
			Name:               ptr.String("aws"),
			DnsSuffix:          ptr.String("other.amazonaws.com"),
			DualStackDnsSuffix: ptr.String("other.api.aws"),
			SupportsFIPS:       ptr.Bool(false),
			SupportsDualStack:  ptr.Bool(false),
		},
	},
	"aws-cn-global": {
		PartitionID: "aws-cn",
		Metadata: partitionMetadata{
			Name:               nil,
			DnsSuffix:          nil,
			DualStackDnsSuffix: nil,
			SupportsFIPS:       nil,
			SupportsDualStack:  nil,
		},
	},
	"cn-north-5": {
		PartitionID: "aws-cn",
		Metadata: partitionMetadata{
			Name:               nil,
			DnsSuffix:          nil,
			DualStackDnsSuffix: nil,
			SupportsFIPS:       nil,
			SupportsDualStack:  nil,
		},
	},
}

var regionRegexps = []struct {
	PartitionID string
	RegionRegex *regexp.Regexp
}{
	{
		PartitionID: "aws",
		RegionRegex: regexp.MustCompile("^(us|eu|ap|sa|ca|me|af)-\\w+-\\d+$"),
	},
	{
		PartitionID: "aws-cn",
		RegionRegex: regexp.MustCompile("^(cn)-\\w+-\\d+$"),
	},
}
