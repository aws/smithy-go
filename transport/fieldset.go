// Code generated by transport/internal/fieldset. DO NOT EDIT.

package transport

// FieldSet is a collection of fields grouped by their usage.
type FieldSet struct {
	header *fields
}

// NewFieldSet returns an initalized FieldSet.
func NewFieldSet() *FieldSet {
	return &FieldSet{
		header: newFields(),
	}
}

// GetHeader retrieves the header Field by name, by performing a
// case-insensitive lookup.
func (fs *FieldSet) GetHeader(name string) Field {
	return fs.header.Get(name)
}

// HasHeader returns whether a matching header Field exists for the given
// name using case-insensitive lookup.
func (fs *FieldSet) HasHeader(name string) bool {
	return fs.header.Has(name)
}

// SetHeader adds field to set of header Fields. If a header field
// with the same name exists (case-insensitive matching), that field's is
// replaced with the values from the provided field, with the casing of the
// name remaining the same. If the field doesn't exist, then it will be added.
// Returns the old field and true if the field already existed, otherwise
// returns false.
func (fs *FieldSet) SetHeader(field Field) (old Field, ok bool) {
	return fs.header.Set(field)
}

// RemoveHeader searches the header Fields for a Field matching the
// provided name (case-insensitive), and removes the field if found. Returns
// the old field and true if the field was removed, otherwise returns false.
func (fs *FieldSet) RemoveHeader(name string) (old Field, ok bool) {
	return fs.header.Remove(name)
}

// GetHeaderFields returns a copy of the Header fields. Any
// modifications to the returned slice of Fields will not be reflected upstream
// in the FieldSet.
func (fs *FieldSet) GetHeaderFields() []Field {
	return fs.header.GetFields()
}
